#
# CCS811_RPi class usage example
#
# Petr Lukas
# July, 11 2017
#
# Version 1.0

import time
import urllib2 # comment this line if you don't need ThinkSpeak connection
import requests
import datetime
import json
import base64




from picamera import PiCamera
from time import sleep

camera = PiCamera()
idAlertRisk = 0
image_64_encode = ""




import SDL_Pi_HDC1000 # comment this line if you don't use HDC sensor
#BME

import smbus

from ctypes import c_short
from ctypes import c_byte
from ctypes import c_ubyte

#BME

from CCS811_RPi import CCS811_RPi

ccs811 = CCS811_RPi()

# Do you want to send data to thingSpeak? If yes set WRITE API KEY, otherwise set False
THINGSPEAK      = False # or type 'YOURAPIKEY'

# Do you want to preset sensor baseline? If yes set the value here, otherwise set False
INITIALBASELINE = False

# Do you want to use integrated temperature meter to compensate temp/RH (CJMCU-8118 board)?
# If not pre-set sensor compensation temperature is 25 C and RH is 50 %
# You can compensate manually by method ccs811.setCompensation(temperature,humidity) 
HDC1080         = False

'''
MEAS MODE REGISTER AND DRIVE MODE CONFIGURATION
0b0       Idle (Measurements are disabled in this mode)
0b10000   Constant power mode, IAQ measurement every second
0b100000  Pulse heating mode IAQ measurement every 10 seconds
0b110000  Low power pulse heating mode IAQ measurement every 60
0b1000000 Constant power mode, sensor measurement every 250ms
'''
# Set MEAS_MODE (measurement interval)
configuration = 0b100000

# Set read interval for retriveving last measurement data from the sensor

pause = 15


#BME-------------------------------------------------------------------------------------------------------------


DEVICE = 0x76 # Default device I2C address


bus = smbus.SMBus(1) # Rev 2 Pi, Pi 2 & Pi 3 uses bus 1
                     # Rev 1 Pi uses bus 0
                     
                     
##### API..................................................................



##### API..................................................................



def getShort(data, index):
  # return two bytes from data as a signed 16-bit value
  return c_short((data[index+1] << 8) + data[index]).value

def getUShort(data, index):
  # return two bytes from data as an unsigned 16-bit value
  return (data[index+1] << 8) + data[index]

def getChar(data,index):
  # return one byte from data as a signed char
  result = data[index]
  if result > 127:
    result -= 256
  return result

def getUChar(data,index):
  # return one byte from data as an unsigned char
  result =  data[index] & 0xFF
  return result

def readBME280ID(addr=DEVICE):
  # Chip ID Register Address
  REG_ID     = 0xD0
  (chip_id, chip_version) = bus.read_i2c_block_data(addr, REG_ID, 2)
  return (chip_id, chip_version)

def readBME280All(addr=DEVICE):
  # Register Addresses
  REG_DATA = 0xF7
  REG_CONTROL = 0xF4
  REG_CONFIG  = 0xF5

  REG_CONTROL_HUM = 0xF2
  REG_HUM_MSB = 0xFD
  REG_HUM_LSB = 0xFE

  # Oversample setting - page 27
  OVERSAMPLE_TEMP = 2
  OVERSAMPLE_PRES = 2
  MODE = 1

  # Oversample setting for humidity register - page 26
  OVERSAMPLE_HUM = 2
  bus.write_byte_data(addr, REG_CONTROL_HUM, OVERSAMPLE_HUM)

  control = OVERSAMPLE_TEMP<<5 | OVERSAMPLE_PRES<<2 | MODE
  bus.write_byte_data(addr, REG_CONTROL, control)

  # Read blocks of calibration data from EEPROM
  # See Page 22 data sheet
  cal1 = bus.read_i2c_block_data(addr, 0x88, 24)
  cal2 = bus.read_i2c_block_data(addr, 0xA1, 1)
  cal3 = bus.read_i2c_block_data(addr, 0xE1, 7)

  # Convert byte data to word values
  dig_T1 = getUShort(cal1, 0)
  dig_T2 = getShort(cal1, 2)
  dig_T3 = getShort(cal1, 4)

  dig_P1 = getUShort(cal1, 6)
  dig_P2 = getShort(cal1, 8)
  dig_P3 = getShort(cal1, 10)
  dig_P4 = getShort(cal1, 12)
  dig_P5 = getShort(cal1, 14)
  dig_P6 = getShort(cal1, 16)
  dig_P7 = getShort(cal1, 18)
  dig_P8 = getShort(cal1, 20)
  dig_P9 = getShort(cal1, 22)

  dig_H1 = getUChar(cal2, 0)
  dig_H2 = getShort(cal3, 0)
  dig_H3 = getUChar(cal3, 2)

  dig_H4 = getChar(cal3, 3)
  dig_H4 = (dig_H4 << 24) >> 20
  dig_H4 = dig_H4 | (getChar(cal3, 4) & 0x0F)

  dig_H5 = getChar(cal3, 5)
  dig_H5 = (dig_H5 << 24) >> 20
  dig_H5 = dig_H5 | (getUChar(cal3, 4) >> 4 & 0x0F)

  dig_H6 = getChar(cal3, 6)

  # Wait in ms (Datasheet Appendix B: Measurement time and current calculation)
  wait_time = 1.25 + (2.3 * OVERSAMPLE_TEMP) + ((2.3 * OVERSAMPLE_PRES) + 0.575) + ((2.3 * OVERSAMPLE_HUM)+0.575)
  time.sleep(wait_time/1000)  # Wait the required time  

  # Read temperature/pressure/humidity
  data = bus.read_i2c_block_data(addr, REG_DATA, 8)
  pres_raw = (data[0] << 12) | (data[1] << 4) | (data[2] >> 4)
  temp_raw = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4)
  hum_raw = (data[6] << 8) | data[7]

  #Refine temperature
  var1 = ((((temp_raw>>3)-(dig_T1<<1)))*(dig_T2)) >> 11
  var2 = (((((temp_raw>>4) - (dig_T1)) * ((temp_raw>>4) - (dig_T1))) >> 12) * (dig_T3)) >> 14
  t_fine = var1+var2
  temperature = float(((t_fine * 5) + 128) >> 8);

  # Refine pressure and adjust for temperature
  var1 = t_fine / 2.0 - 64000.0
  var2 = var1 * var1 * dig_P6 / 32768.0
  var2 = var2 + var1 * dig_P5 * 2.0
  var2 = var2 / 4.0 + dig_P4 * 65536.0
  var1 = (dig_P3 * var1 * var1 / 524288.0 + dig_P2 * var1) / 524288.0
  var1 = (1.0 + var1 / 32768.0) * dig_P1
  if var1 == 0:
    pressure=0
  else:
    pressure = 1048576.0 - pres_raw
    pressure = ((pressure - var2 / 4096.0) * 6250.0) / var1
    var1 = dig_P9 * pressure * pressure / 2147483648.0
    var2 = pressure * dig_P8 / 32768.0
    pressure = pressure + (var1 + var2 + dig_P7) / 16.0

  # Refine humidity
  humidity = t_fine - 76800.0
  humidity = (hum_raw - (dig_H4 * 64.0 + dig_H5 / 16384.0 * humidity)) * (dig_H2 / 65536.0 * (1.0 + dig_H6 / 67108864.0 * humidity * (1.0 + dig_H3 / 67108864.0 * humidity)))
  humidity = humidity * (1.0 - dig_H1 * humidity / 524288.0)
  if humidity > 100:
    humidity = 100
  elif humidity < 0:
    humidity = 0

  return temperature/100.0,pressure/100.0,humidity



def main():

  (chip_id, chip_version) = readBME280ID()
  print "Chip ID     :", chip_id
  print "Version     :", chip_version

  temperature,pressure,humidity = readBME280All()

  print "Temperature : ", temperature, "C"
  print "Pressure : ", pressure, "hPa"
  print "Humidity : ", humidity, "%"
  
 
  
   
  if temperature >= 1 and temperature <= 2:
        
    print("Valor normal de la temperatura")
  
  if temperature > 4 and temperature <= 6:
      
        print("Tomando foto... Quemadura primer grado")
        
        camera.start_preview()
        idAlertRisk =1
        sleep(1)
        
        camera.capture('/home/pi/Desktop/imagee.jpg')
        
        camera.stop_preview()
        
        print("Foto tomada.")
        
        print("Convirtiendo foto!")
        
        file = '/home/pi/Desktop/imagee.jpg'
        imageCamera = open(file, 'rb')
        image_read = imageCamera.read()
        image_64_encode = base64.b64encode(image_read)
    
        print("Foto convertida")
        #print(image_64_encode)
    
  if  temperature > 5 and temperature <= 7:
        
        print("Tomando foto... Quemadura segundo grado")
        idAlertRisk = 2
        camera.start_preview()
        sleep(1)
        camera.capture('/home/pi/Desktop/imagee.jpg')
        camera.stop_preview()
    
        print("Foto tomada.")
        
        print("Convirtiendo foto!")
    
        file = '/home/pi/Desktop/imagee.jpg'
        imageCamera = open(file, 'rb')
        image_read = imageCamera.read()
        image_64_encode = base64.b64encode(image_read)
    
        
        print("Foto convertida")
    
  if temperature > 8 and temperature <= 30:
        
        print("Tomando foto... Quemadura tercer grado")
        idAlertRisk = 3
    
        camera.start_preview()
        sleep(1)
        camera.capture('/home/pi/Desktop/imagee.jpg')
        
        camera.stop_preview()
    
        print("Foto tomada.")
        
        print("Convirtiendo foto!")
    
        file = '/home/pi/Desktop/imagee.jpg'
        imageCamera = open(file, 'rb')
        image_read = imageCamera.read()
        image_64_encode = base64.b64encode(image_read)
        
       
    
      
        print("Foto convertida")
        
        
        
        
    
  else:
        
        print("Todo anda con normalidad")
       
  time.sleep(10)
 



#BME-------------------------------------------------------------------------------------------------------------


def thingSpeak(eCO2,TVOC,baseline,temperature,humidity):
    print 'Sending to ThingSpeak API...'
    url = "https://api.thingspeak.com/update?api_key="
    url += THINGSPEAK
    url += "&field1="
    url += str(eCO2)
    url += "&field2="
    url += str(TVOC)
    url += "&field3="
    url += str(baseline)
    url += "&field4="
    url += str(temperature)
    url += "&field5="
    url += str(humidity)
    #print url
    try: 
      content = urllib2.urlopen(url).read()
    except urllib2.HTTPError:
      print "Invalid HTTP response"
      return False
    print 'Done'
    #print content



print 'Checking hardware ID...'

hwid = ccs811.checkHWID()
if(hwid == hex(129)):
        print 'Hardware ID is correct'
else: print 'Incorrect hardware ID ',hwid, ', should be 0x81'




#print 'MEAS_MODE:',ccs811.readMeasMode()
ccs811.configureSensor(configuration)
print 'MEAS_MODE:',ccs811.readMeasMode()
print 'STATUS: ',bin(ccs811.readStatus())
print '---------------------------------'

# Use these lines if you need to pre-set and check sensor baseline value
if(INITIALBASELINE > 0):
        ccs811.setBaseline(INITIALBASELINE)
        print(ccs811.readBaseline())


# Use these lines if you use CJMCU-8118 which has HDC1080 temp/RH sensor
if(HDC1080):
        hdc1000 = SDL_Pi_HDC1000.SDL_Pi_HDC1000()
        hdc1000.turnHeaterOff()
        hdc1000.setTemperatureResolution(SDL_Pi_HDC1000.HDC1000_CONFIG_TEMPERATURE_RESOLUTION_14BIT)
        hdc1000.setHumidityResolution(SDL_Pi_HDC1000.HDC1000_CONFIG_HUMIDITY_RESOLUTION_14BIT)


while True:
    
 
        if(HDC1080):
                humidity = hdc1000.readHumidity()
                temperature = hdc1000.readTemperature()
                ccs811.setCompensation(temperature,humidity)
        else:
                humidity = 50.00
                temperature = 25.00
        
        statusbyte = ccs811.readStatus()
        print 'STATUS: ', bin(statusbyte)

        error = ccs811.checkError(statusbyte)
        
        if(error):
                print 'ERROR:',ccs811.checkError(statusbyte)
                
        if(not ccs811.checkDataReady(statusbyte)):
                print 'No new samples are ready'
                print '---------------------------------';
                time.sleep(pause)
                continue;
        result = ccs811.readAlg();
        
        if(not result):
            
                #print 'Invalid result received'
                time.sleep(pause)
                continue;
        baseline = ccs811.readBaseline()
        print 'eCO2: ',result['eCO2'],' ppm'
        
        if result['eCO2'] >= 0 and result['eCO2'] <= 10000:
            print 'Valores normales de eCO2 en su casa'
        
        else :
            print 'Hay valores de eCO2 inusuales en su casa'
            print("Tomando foto...")
    
            camera.start_preview()
            sleep(1)
            camera.capture('/home/pi/Desktop/imagee.jpg')
            camera.stop_preview()
            print("Foto tomada.")
           
            
        
        print 'TVOC: ',result['TVOC'], 'ppb'
        print 'Status register: ',bin(result['status'])
        print 'Last error ID: ',result['errorid']
        print 'RAW data: ',result['raw']
        print 'Baseline: ',baseline
        print '---------------------------------';
        print 'Imprimiendo imagen'
        
        print (idAlertRisk)
        output_date = datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
      
          
        print("Hora del evento:", output_date)
        
        
        #if idAlertRisk != 0:       
        dataInf = {
            "Gas": result['eCO2'],
            "Humidity": humidity,
            "Temperature": temperature,
            "EventDate": output_date,
            "HomeId": 3,
            "AlertRiskId": idAlertRisk,
            "file": {
                "Name": "pruebass",
                "Content":image_64_encode
            }
        }
        print(dataInf)
        #Endpoint
        url = "http://ec2-3-129-224-48.us-east-2.compute.amazonaws.com:8080/api/StaHomeAlert/AddHomeAlert"

        #BodyResponse
        response = requests.post(url, json=dataInf)
        print('HEY',response)
        
        
        
        

          
        if (THINGSPEAK is not False):
                thingSpeak(result['eCO2'],result['TVOC'],baseline,temperature,humidity)
        time.sleep(pause)
        
        main()
       






